export type NewsItem = {
  id: number
  title: string
  href: string
  date?: string
  image?: string
  excerpt?: string
}

export type NewsPage = {
  items: NewsItem[]
  page: number
  hasPrev: boolean
  hasNext: boolean
  totalPages: number
}

export type NewsDetail = {
  id: number
  title: string
  date?: string
  subtitle?: string
  paragraphs?: string[]
  images?: string[]
  embeds?: string[]
  links?: { href: string; text: string }[]
  contentHtml: string
}

export type SectionDetail = {
  title: string
  content: string
  lastUpdated: string
  originalUrl: string
}

// –ù–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
export type ContentElement = 
  | { type: 'paragraph'; content: string }
  | { type: 'heading'; level: 1 | 2 | 3 | 4 | 5 | 6; content: string; className?: string }
  | { type: 'bold'; content: string }
  | { type: 'table'; headers?: string[]; data: string[][] }
  | { type: 'list'; items: string[]; ordered: boolean }
  | { type: 'image'; src: string; alt?: string; title?: string }
  | { type: 'link'; text: string; href: string }
  | { type: 'divider' }
  | { type: 'raw'; html: string }

export type StructuredSectionDetail = {
  title: string
  content: ContentElement[]
  lastUpdated: string
  originalUrl: string
}

const BASE = "http://192.168.3.52:3000/rksi"
const ORIGIN = "http://192.168.3.52:3000/rksi"

function normalizeUrl(url?: string | null): string | undefined {
  if (!url) return undefined
  if (url.startsWith("http")) return url
  if (url.startsWith("//")) return `https:${url}`
  if (url.startsWith("/")) return `${ORIGIN}${url}`
  return `${ORIGIN}/${url}`
}

async function fetchWithTimeout(resource: string, options?: RequestInit & { timeoutMs?: number }) {
  const { timeoutMs = 15000, ...init } = options || {}
  const controller = new AbortController()
  const id = setTimeout(() => controller.abort(), timeoutMs)
  try {
    const res = await fetch(resource, { 
         ...init, 
         signal: controller.signal 
        })
    return res
  } finally {
    clearTimeout(id)
  }
}

export class RksiApi {
  static async getNews(page: number = 1): Promise<NewsPage> {
    const cacheKey = `news:page:${page}`
    const cached = sessionStorage.getItem(cacheKey)
    if (cached) {
      try {
        const parsed = JSON.parse(cached) as NewsPage & { timestamp: number }
        // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç
        if (Date.now() - parsed.timestamp < 5 * 60 * 1000) {
          console.info(`üóÑÔ∏è [RksiApi.getNews] cache hit for page=${page}. items=${parsed.items.length}`)
          return parsed
        }
      } catch {}
    }
    console.info(`üåê [RksiApi.getNews] fetching page=${page} ‚Üí ${BASE}/news/${page}`)
    const res = await fetchWithTimeout(`${BASE}/news/${page}`, { timeoutMs: 15000 })
    console.info(`üì• [RksiApi.getNews] status=${res.status}`)
    const html = await res.text()
    const doc = new DOMParser().parseFromString(html, "text/html")

    console.info(`üì• [RksiApi.getNews] ${doc.body.innerHTML}`)

    const items: NewsItem[] = []
    // –¢–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫: .flexnews
    const candidates = doc.querySelectorAll<HTMLElement>(".flexnews")
    console.info(`üß© [RksiApi.getNews] .flexnews found=${candidates.length}`)
    candidates.forEach((el, idx) => {
      const link = el.querySelector<HTMLAnchorElement>("a[href*='/news/n_']")
      if (!link) return
      const rawHref = link.getAttribute("href") || ""
      const hrefPath = rawHref.startsWith("http") ? rawHref : new URL(rawHref, ORIGIN).pathname
      const idMatch = hrefPath.match(/n_(\d+)/)
      const id = idMatch ? Number(idMatch[1]) : NaN
      if (!id) return

      const title = (el.querySelector("h4")?.textContent || link.textContent || "").trim()
      const date = (el.querySelector(".smalli")?.textContent || "").trim()
      const img = normalizeUrl(el.querySelector<HTMLImageElement>("img")?.getAttribute("src"))

      // –û–ø–∏—Å–∞–Ω–∏–µ: –≤–æ–∑—å–º—ë–º —Ç–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ –¥–∏–≤-–∞ –≤–Ω—É—Ç—Ä–∏ .flexnews
      let excerpt = ""
      const blocks = el.querySelectorAll<HTMLElement>(":scope > div")
      if (blocks.length > 0) {
        const contentDiv = blocks[blocks.length - 1]
        // –£–±–µ—Ä—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ more
        contentDiv.querySelectorAll("h4, a, span.smalli, br").forEach((n) => n.remove())
        excerpt = (contentDiv.textContent || "").replace(/\s+/g, " ").trim()
      }

      const item: NewsItem = { id, title, href: hrefPath, date, image: img, excerpt }
      items.push(item)
      console.debug(`üì∞ [RksiApi.getNews] item#${idx}:`, item)
    })

    // –û–ø—Ä–µ–¥–µ–ª–∏–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä—ë–¥ (best effort)
    const pagination = doc.querySelector(".pagination, nav[aria-label='pagination'], .pager, .pages")
    const relPrev = pagination?.querySelector("a[rel='prev']") as HTMLAnchorElement | null
    const relNext = pagination?.querySelector("a[rel='next']") as HTMLAnchorElement | null
    const hasPrev = !!relPrev || page > 1
    const hasNext = !!relNext || items.length > 0

    // –û–ø—Ä–µ–¥–µ–ª–∏–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ navigation
    let totalPages = page
    const navigationText = doc.querySelector("main p")?.textContent || ""
    console.info(`üß≠ [RksiApi.getNews] navigation text: "${navigationText}"`)
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ navigation
    const pageMatches = navigationText.match(/(\d+)(?=\s*$)/)
    if (pageMatches) {
      totalPages = Number(pageMatches[1])
      console.info(`üß≠ [RksiApi.getNews] found totalPages=${totalPages} from navigation`)
    } else {
      // Fallback: –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ navigation, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É
      if (hasNext) {
        totalPages = page + 1
      }
    }

    const payload: NewsPage & { timestamp: number } = { 
      items, 
      page, 
      hasPrev, 
      hasNext, 
      totalPages,
      timestamp: Date.now()
    }
    console.info(`‚úÖ [RksiApi.getNews] parsed items=${items.length} hasPrev=${hasPrev} hasNext=${hasNext} totalPages=${totalPages}`)
    try { sessionStorage.setItem(cacheKey, JSON.stringify(payload)) } catch {}
    return payload
  }

  static async getNewsDetail(id: number): Promise<NewsDetail> {
    const cacheKey = `news:detail:${id}`
    const cached = sessionStorage.getItem(cacheKey)
    if (cached) {
      try {
        const parsed = JSON.parse(cached) as NewsDetail & { timestamp: number }
        // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (Date.now() - parsed.timestamp < 10 * 60 * 1000) {
          console.info(`üóÑÔ∏è [RksiApi.getNewsDetail] cache hit for id=${id}`)
          return parsed
        }
      } catch {}
    }
    console.info(`üåê [RksiApi.getNewsDetail] fetching id=${id} ‚Üí ${BASE}/news/n_${id}`)
    const res = await fetchWithTimeout(`${BASE}/news/n_${id}`, { timeoutMs: 15000 })
    console.info(`üì• [RksiApi.getNewsDetail] status=${res.status}`)
    const html = await res.text()
    const doc = new DOMParser().parseFromString(html, "text/html")

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –¥–∞—Ç–∞ –≤ <h1> –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "Title [dd.mm.yyyy]"
    const h1Raw = (doc.querySelector("h1")?.textContent || "–ù–æ–≤–æ—Å—Ç—å").trim()
    const m = h1Raw.match(/^(.*)\[(.*)\]\s*$/)
    const title = m ? m[1].trim() : h1Raw
    const date = m ? m[2].trim() : undefined

    // –í–æ–∑—å–º—ë–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    const mainEl = doc.querySelector("main") || doc.body
    // –£–±–µ—Ä—ë–º —Å–∫—Ä–∏–ø—Ç—ã/–ª–∏—à–Ω–µ–µ
    mainEl.querySelectorAll("script, style, nav, header, footer").forEach((n) => n.remove())
    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Äî –ø–µ—Ä–≤—ã–π <b> –≤ main
    const subtitle = mainEl.querySelector("b")?.textContent?.trim()
    // –ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã ‚Äî –≤—Å–µ <p>, –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ <img>
    const paragraphs = Array.from(mainEl.querySelectorAll<HTMLParagraphElement>("p, li")).filter(p => !p.querySelector("img")).map(p => p.textContent?.trim() || "").filter(Boolean)
    // –ö–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî –≤–Ω—É—Ç—Ä–∏ .img50
    const images = Array.from(mainEl.querySelectorAll<HTMLImageElement>(".img50 img")).map(img => normalizeUrl(img.getAttribute("src"))!).filter(Boolean)
    // –í–∏–¥–µ–æ–≤—Å—Ç–∞–≤–∫–∏/iframes ‚Äî —Å–æ–±–µ—Ä—ë–º –ª—é–±—ã–µ iframe –≤ main
    const embeds = Array.from(mainEl.querySelectorAll<HTMLIFrameElement>("iframe")).map(f => normalizeUrl(f.getAttribute("src")) || "").filter(Boolean)
    // –°—Å—ã–ª–∫–∏ –≤–Ω–∏–∑—É ‚Äî –ª—é–±—ã–µ <a> –≤ main (–æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ/–∞–±—Å–æ–ª—é—Ç–Ω—ã–µ)
    const links = Array.from(mainEl.querySelectorAll<HTMLAnchorElement>("a")).map(a => ({
      href: normalizeUrl(a.getAttribute("href")) || "",
      text: (a.textContent || "").trim()
    })).filter(l => !!l.href)

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ HTML
    mainEl.querySelectorAll<HTMLImageElement>("img").forEach((img) => {
      const src = img.getAttribute("src")
      const normalized = normalizeUrl(src)
      if (normalized) img.setAttribute("src", normalized)
    })
    mainEl.querySelectorAll<HTMLAnchorElement>("a").forEach((a) => {
      const href = a.getAttribute("href")
      const normalized = normalizeUrl(href)
      if (normalized) a.setAttribute("href", normalized)
    })
    const contentHtml = mainEl.innerHTML

    const payload: NewsDetail & { timestamp: number } = { 
      id, 
      title, 
      date, 
      subtitle, 
      paragraphs, 
      images, 
      embeds, 
      links, 
      contentHtml,
      timestamp: Date.now()
    }
    console.info(`‚úÖ [RksiApi.getNewsDetail] parsed id=${id} title="${title}"`)
    try { sessionStorage.setItem(cacheKey, JSON.stringify(payload)) } catch {}
    return payload
  }

  static prefetchNewsPages(currentPage: number, hasPrev: boolean, hasNext: boolean) {
    if (hasPrev) this.getNews(currentPage - 1).catch((e) => console.warn(`‚ö†Ô∏è prefetch prev failed:`, e))
    if (hasNext) this.getNews(currentPage + 1).catch((e) => console.warn(`‚ö†Ô∏è prefetch next failed:`, e))
  }

  static async getSectionDetail(path: string): Promise<StructuredSectionDetail> {
    const cacheKey = `section:${path}`
    const cached = sessionStorage.getItem(cacheKey)
    if (cached) {
      try {
        const parsed = JSON.parse(cached) as StructuredSectionDetail & { timestamp: number }
        // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤
        if (Date.now() - parsed.timestamp < 60 * 60 * 1000) {
          console.info(`üóÑÔ∏è [RksiApi.getSectionDetail] cache hit for path=${path}`)
          return parsed
        }
      } catch {
        // –ï—Å–ª–∏ –∫—ç—à –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        sessionStorage.removeItem(cacheKey)
      }
    }

    console.info(`üåê [RksiApi.getSectionDetail] fetching path=${path} ‚Üí ${BASE}/${path}`)
    const res = await fetchWithTimeout(`${BASE}/${path}`, { timeoutMs: 15000 })
    console.info(`üì• [RksiApi.getSectionDetail] status=${res.status}`)
    
    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`)
    }

    const html = await res.text()
    const doc = new DOMParser().parseFromString(html, "text/html")

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–≥–∞ main
    const mainElement = doc.querySelector("main")
    const titleElement = doc.querySelector("title") || doc.querySelector("h1")
    
    if (!mainElement) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.')
    }

    // –ü–∞—Ä—Å–∏–º HTML –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let structuredContent: ContentElement[]
    try {
      structuredContent = this.parseHtmlToStructuredContent(mainElement)
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error)
      // Fallback: –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º raw HTML
      structuredContent = [{
        type: 'raw',
        html: mainElement.innerHTML
      }]
    }
    
    const payload: StructuredSectionDetail & { timestamp: number } = {
      title: titleElement?.textContent?.trim() || `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${path}`,
      content: structuredContent,
      lastUpdated: new Date().toISOString(),
      originalUrl: `https://rksi.ru/${path}`,
      timestamp: Date.now()
    }

    console.info(`‚úÖ [RksiApi.getSectionDetail] parsed path=${path} title="${payload.title}" elements=${structuredContent.length}`)
    try { sessionStorage.setItem(cacheKey, JSON.stringify(payload)) } catch {}
    return payload
  }

  private static cleanMainContent(mainElement: Element): string {
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    const clone = mainElement.cloneNode(true) as Element
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const elementsToRemove = clone.querySelectorAll('script, style, nav, header, footer, .sidebar, .navigation')
    elementsToRemove.forEach(el => el.remove())
    
    // –û—á–∏—â–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ
    const allElements = clone.querySelectorAll('*')
    allElements.forEach(el => {
      const allowedAttributes = ['href', 'src', 'alt', 'title', 'class']
      const attributes = Array.from(el.attributes)
      attributes.forEach(attr => {
        if (!allowedAttributes.includes(attr.name)) {
          el.removeAttribute(attr.name)
        }
      })
    })
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ HTML
    clone.querySelectorAll<HTMLImageElement>("img").forEach((img) => {
      const src = img.getAttribute("src")
      const normalized = normalizeUrl(src)
      if (normalized) img.setAttribute("src", normalized)
    })
    clone.querySelectorAll<HTMLAnchorElement>("a").forEach((a) => {
      const href = a.getAttribute("href")
      const normalized = normalizeUrl(href)
      if (normalized) a.setAttribute("href", normalized)
    })
    
    return clone.innerHTML
  }

  private static parseHtmlToStructuredContent(mainElement: Element): ContentElement[] {
    const elements: ContentElement[] = []
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–æ—á–µ—Ä–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    for (const child of Array.from(mainElement.children)) {
      const tagName = child.tagName.toLowerCase()
      const className = child.getAttribute('class') || ''
      
      switch (tagName) {
        case 'h1':
        case 'h2':
        case 'h3':
        case 'h4':
        case 'h5':
        case 'h6':
          const level = parseInt(tagName.charAt(1)) as 1 | 2 | 3 | 4 | 5 | 6
          elements.push({
            type: 'heading',
            level,
            content: child.textContent?.trim() || '',
            className
          })
          break
          
        case 'p':
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          if (child.children.length === 0) {
            const text = child.textContent?.trim()
            if (text) {
              elements.push({ type: 'paragraph', content: text })
            }
          } else {
            // –ï—Å–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–∞—Ä—Å–∏–º –∏—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
            const nestedElements = this.parseHtmlToStructuredContent(child)
            elements.push(...nestedElements)
          }
          break
          
        case 'b':
        case 'strong':
          elements.push({ type: 'bold', content: child.textContent?.trim() || '' })
          break
          
        case 'table':
          const tableData = this.parseTable(child as HTMLTableElement)
          if (tableData) {
            elements.push(tableData)
          }
          break
          
        case 'ul':
        case 'ol':
          const listItems = Array.from(child.querySelectorAll('li')).map(li => li.textContent?.trim() || '')
          elements.push({
            type: 'list',
            items: listItems.filter(Boolean),
            ordered: tagName === 'ol'
          })
          break
          
        case 'img':
          const img = child as HTMLImageElement
          elements.push({
            type: 'image',
            src: img.src,
            alt: img.alt || undefined,
            title: img.title || undefined
          })
          break
          
        case 'a':
          const link = child as HTMLAnchorElement
          elements.push({
            type: 'link',
            text: link.textContent?.trim() || '',
            href: link.href
          })
          break
          
        case 'hr':
          elements.push({ type: 'divider' })
          break
          
        case 'div':
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ div
          if (child.children.length > 0) {
            const nestedElements = this.parseHtmlToStructuredContent(child)
            elements.push(...nestedElements)
          } else {
            const text = child.textContent?.trim()
            if (text) {
              elements.push({ type: 'paragraph', content: text })
            }
          }
          break
          
        default:
          // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ raw HTML
          if (child.textContent?.trim()) {
            elements.push({ type: 'raw', html: child.outerHTML })
          }
      }
    }
    
    return elements
  }

  private static parseTable(tableElement: HTMLTableElement): ContentElement | null {
    const rows = Array.from(tableElement.querySelectorAll('tr'))
    if (rows.length === 0) return null
    
    const data: string[][] = []
    let headers: string[] | undefined
    
    rows.forEach((row, rowIndex) => {
      const cells = Array.from(row.querySelectorAll('td, th')).map(cell => 
        cell.textContent?.trim() || ''
      )
      
      if (rowIndex === 0 && row.querySelector('th')) {
        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = cells
      } else {
        data.push(cells)
      }
    })
    
    return {
      type: 'table',
      headers,
      data
    }
  }
}



